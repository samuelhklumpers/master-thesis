module Ornament.Number where

open import Data.Product
open import Data.Sum
open import Data.Unit
open import Data.Empty
open import Function.Base
open import Data.Fin using (Fin; zero; suc)
open import Data.Nat
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Level 

infixr 10 _‚à∑_

data Sum : Set
data NDesc : Set where
  []  : NDesc
  _‚à∑_ : Sum ‚Üí NDesc ‚Üí NDesc

data Factor : Set where
  par : Factor
  num : NDesc ‚Üí Factor
  rec : NDesc ‚Üí Factor

data Product : Set where
  *n   : ‚Ñï ‚Üí Product
  _*‚à∑_ : Factor ‚Üí Product ‚Üí Product
  
data Sum where
  +n   : ‚Ñï ‚Üí Sum
  _+‚à∑_ : Product ‚Üí Sum ‚Üí Sum

Id : NDesc
Id = ((par *‚à∑ (*n 1)) +‚à∑ (+n 0)) ‚à∑ []


open import Ornament.DescL

Fun : NDesc ‚Üí Desc ‚ä§ (‚àÖ ‚ñ∑ const Set) ‚Ñì-zero
Fun' : Sum ‚Üí Con ‚ä§ (‚àÖ ‚ñ∑ const Set) ‚Ñì-zero
Fun' (+n _) = ùüô _
Fun' (*n _ +‚à∑ xs) = Fun' xs
Fun' ((par *‚à∑ ys) +‚à∑ xs)   = œÉf‚Ä≤ proj‚ÇÇ (Fun' (ys +‚à∑ xs))
Fun' ((num x *‚à∑ ys) +‚à∑ xs) = œÉd‚Ä≤ (const tt) id (Fun x) (Fun' (ys +‚à∑ xs))
Fun' ((rec x *‚à∑ ys) +‚à∑ xs) = rec (const tt) (Œª { (_ , A) ‚Üí (_ , Œº (Fun x) (_ , A) _) }) (Fun' (ys +‚à∑ xs))

Fun []       = []
Fun (x ‚à∑ xs) = Fun' x ‚à∑ (Fun xs)

-- unsurprising
{-# TERMINATING #-}
eval2 : ‚àÄ {A} (d : NDesc) ‚Üí (Œº (Fun d)) (_ , A) _ ‚Üí (A ‚Üí ‚Ñï) ‚Üí ‚Ñï
eval : ‚àÄ {A} (d : NDesc) {d'} ‚Üí ‚ü¶ Fun d ‚üßDesc (Œº (Fun d')) (_ , A) _ ‚Üí (A ‚Üí ‚Ñï) ‚Üí ‚Ñï
eval2 d (con x) = eval d x

eval' : ‚àÄ {A} (s : Sum) {d'} ‚Üí ‚ü¶ Fun' s ‚üßCon-‚Ñì ‚Ñì-zero (Œº (Fun d')) (_ , A) _ ‚Üí (A ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí ‚Ñï

eval (s ‚à∑ d) (inj‚ÇÅ x) f = eval' s x f 1
eval (s ‚à∑ d) (inj‚ÇÇ y) f = eval d y f

eval' (+n n) (lift refl) f _ = n
eval' (*n n     +‚à∑ s) x f m = m * n + eval' s x f 1
eval' ((par *‚à∑ p) +‚à∑ s) (a , x) f m = eval' (p +‚à∑ s) x f (f a * m)  
eval' ((num d *‚à∑ p) +‚à∑ s) (y , x) f m = eval' (p +‚à∑ s) x f (eval2 d y f)
eval' ((rec d *‚à∑ p) +‚à∑ s) (r , x) f m = eval' (p +‚à∑ s) x f (eval2 _ r Œª z ‚Üí eval2 _ z f)

open import Ornament.OrnL

Trie' : ‚àÄ (s : Sum) {nd'} ‚Üí ConOrnDesc {J = Œº (Fun nd') (_ , ‚ä§) _} {Œî = ‚àÖ ‚ñ∑ (const Set)} (const tt) id (Fun' s) ‚Ñì-zero

Trie : ‚àÄ (nd : NDesc) {nd'} ‚Üí OrnDesc {Œî = ‚àÖ ‚ñ∑ (const Set)} {J = Œº (Fun nd') (_ , ‚ä§) _} (const tt) id (Fun nd) ‚Ñì-zero
Trie []      = []
Trie (s ‚à∑ d) = Trie' s ‚à∑ Trie d

Trie' (+n n) = {!!}
Trie' (*n n +‚à∑ s) = {!!}
Trie' ((par *‚à∑ p) +‚à∑ s) = {!!}
Trie' ((num d *‚à∑ p) +‚à∑ s) = {!!}
Trie' ((rec d *‚à∑ p) +‚à∑ s) = {!!}


-- NIx : ‚àÄ u ‚Üí (nd' : NDesc) ‚Üí NTyp nd' (app nd) u ‚Üí Set
-- data Ix : Œº nd u ‚Üí Set where
--   ix : ‚àÄ {u x} ‚Üí NIx u nd x ‚Üí Ix (con x) 

-- UIx : (u : U) ‚Üí UTyp u ‚Üí Set
-- PIx : (p : Poly) ‚Üí PTyp p u ‚Üí Set

-- UIx top        _ = ‚ä§
-- UIx (app nd u) x = Ix x
-- UIx (pol p u)  x = PIx p x

-- FunIx : Op ‚Üí Set ‚Üí Set ‚Üí Set
-- FunIx ‚äï = _‚äé_
-- FunIx ‚äó = _√ó_

-- PIx {u = u} var x = UIx u x
-- PIx (add p q) (inj‚ÇÅ x) = PIx p x
-- PIx (add p q) (inj‚ÇÇ y) = PIx q y
-- PIx (mul f p q) (x , y) = FunIx f (PIx p x) (PIx q y)

-- FIx : (fd : FDesc) ‚Üí FTyp fd (app nd) u ‚Üí Set
-- FIx (rec p) x = Ix x
-- FIx (var p) x = PIx p x
-- FIx (num p nd) x = Ix x

-- CIx : (cd : CDesc) ‚Üí CTyp cd (app nd) u ‚Üí Set
-- CIx (constant c) tt      = Fin c
-- CIx (leaf fd)    x       = FIx fd x
-- CIx (node f l r) (x , y) = FunIx f (CIx l x) (CIx r y)

-- NIx u (cd ‚à∑ cds) (inj‚ÇÅ x) = CIx cd x
-- NIx u (cd ‚à∑ cds) (inj‚ÇÇ y) = NIx u cds y

-- {- Fin-2 : Ix Nat-2
-- Fin-2 = ix (inj‚ÇÇ (ix (inj‚ÇÇ (ix {!Fin 0!})))) -}

-- Fin-1/2 : Ix Nat-2
-- Fin-1/2 = ix (inj‚ÇÇ (ix (inj‚ÇÅ zero)))

-- FFin-2/4 : Ix F-4
-- FFin-2/4 = ix (inj‚ÇÇ (ix (inj‚ÇÅ tt)))

-- -- \o/ finger trees are numerical representations after all

-- FT : Ft ‚Üí Set ‚Üí Set
-- FT x A = Ix x ‚Üí A

-- sucFt : Ft ‚Üí Ft
-- sucFt (con (inj‚ÇÅ tt)) = con (inj‚ÇÇ (inj‚ÇÅ tt))
-- sucFt (con (inj‚ÇÇ (inj‚ÇÅ tt))) = con (inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (con (inj‚ÇÅ (tt , tt)) , con (inj‚ÇÅ tt)))))
-- sucFt (con (inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÅ (x , m))))) = {!!}

-- cons : ‚àÄ {n} {A : Set} ‚Üí A ‚Üí FT n A ‚Üí FT (sucFt n) A
-- cons x xs = {!!}


-- -- NTrie : (D : NDesc) ‚Üí Set ‚Üí NTyp D (Œº ND) ‚Üí Set

-- -- data Trie {ND : NDesc} (A : Set) : Œº ND ‚Üí Set where
-- --   trie : ‚àÄ {x} ‚Üí NTrie ND A x ‚Üí Trie A (con x)

-- -- FTrie : (FD : FDesc) ‚Üí Set ‚Üí FTyp FD (Œº ND) ‚Üí Set
-- -- FTrie rec      A x = Trie A x
-- -- FTrie (num ND) A x = Trie A x

-- -- CTrie : (CD : CDesc) ‚Üí Set ‚Üí CTyp CD (Œº ND) ‚Üí Set
-- -- CTrie (nil c)        A tt      = Vec A c
-- -- CTrie (cons FD ‚äï CD) A (x , y) = FTrie FD A x √ó CTrie CD A y
-- -- CTrie (cons FD ‚äó CD) A (x , y) = FTrie FD (CTrie CD A y) x

-- -- NTrie (CD ‚à∑ ND) A (inj‚ÇÅ x) = CTrie CD A x
-- -- NTrie (CD ‚à∑ ND) A (inj‚ÇÇ y) = NTrie ND A y

-- -- Trie-2 : Trie ‚Ñï Nat-2
-- -- Trie-2 = trie (trie (trie [] , zero ‚à∑ []) , zero ‚à∑ [])
