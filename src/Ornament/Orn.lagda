\begin{code}
    
{-# OPTIONS --type-in-type --with-K #-}


module Ornament.Orn where

open import Ornament.Desc


open Agda.Primitive renaming (Set to Type)

open import Data.Unit
open import Data.Empty
open import Data.Product
open import Data.Sum hiding (map‚ÇÇ)
open import Data.Nat
open import Function.Base

open import Relation.Binary.PropositionalEquality using (_‚â°_; cong; sym; refl; subst) renaming (trans to _‚àô_; subst‚ÇÇ to subst2)


private variable
  J K L : Type
  A B C X Y Z : Type
  P P‚Ä≤ : Type
  Œì Œî Œò : Tel P
  U V W   : ExTel Œì

private variable
  If If‚Ä≤ If‚Ä≥ If‚Ä¥ : Info
\end{code}

Ornaments
%<*Orn-type>
\begin{code}
data Orn  {If} {If‚Ä≤} (f : Cxf Œî Œì) (e : K ‚Üí J)
          : DescI If Œì J ‚Üí DescI If‚Ä≤ Œî K ‚Üí Type
\end{code}
%</Orn-type>

%<*ornForget-type>
\begin{code}
ornForget : {f : Cxf Œî Œì} {e : K ‚Üí J} {D : DescI If Œì J} {E : DescI If‚Ä≤ Œî K}
          ‚Üí Orn f e D E ‚Üí ‚àÄ p {i} ‚Üí Œº E p i ‚Üí Œº D (f p) (e i)
\end{code}
%</ornForget-type>

All significant squares have diagrams below
%<*ConOrn-type>
\begin{code}
data ConOrn  {If} {If‚Ä≤} {c : Cxf Œî Œì} (f : VxfO c W V) (e : K ‚Üí J)
             : ConI If Œì J V ‚Üí ConI If‚Ä≤ Œî K W ‚Üí Type where
\end{code}
%</ConOrn-type>

Preserving
%<*Orn-1>
\begin{code}
  ùüô  : ‚àÄ {k j}
     ‚Üí (‚àÄ p ‚Üí e (k p) ‚â° j (over f p))
     ‚Üí ‚àÄ {if if‚Ä≤}
     ‚Üí ConOrn f e (ùüô {if = if} j) (ùüô {if = if‚Ä≤} k)
\end{code}
%</Orn-1>
(*)

%<*Orn-rho>
\begin{code}
  œÅ  : ‚àÄ {k j g h D E}
     ‚Üí ConOrn f e D E
     ‚Üí (‚àÄ p ‚Üí g (c p) ‚â° c (h p))
     ‚Üí (‚àÄ p ‚Üí e (k p) ‚â° j (over f p))
     ‚Üí ‚àÄ {if if‚Ä≤}
     ‚Üí ConOrn f e (œÅ {if = if} j g D) (œÅ {if = if‚Ä≤} k h E)
\end{code}
%</Orn-rho>

%<*Orn-sigma-delta>
\begin{code}
  œÉ  : ‚àÄ  {S} {V'} {W'} {D : ConI If Œì J V'} {E : ConI If‚Ä≤ Œî K W'}
          {g : Vxf Œì (V ‚ñ∑ S) _} {h : Vxf Œî (W ‚ñ∑ (S ‚àò over f)) _}
     ‚Üí (f' : VxfO c W' V')
     ‚Üí ConOrn f' e D E
     ‚Üí (‚àÄ {p'} (p : ‚ü¶ W ‚ñ∑ (S ‚àò over f) ‚üßtel p') ‚Üí g (VxfO-‚ñ∑ f S p) ‚â° f' (h p))
     ‚Üí ‚àÄ {if if‚Ä≤}
     ‚Üí ConOrn f e (œÉ S {if = if} g D) (œÉ (S ‚àò over f) {if = if‚Ä≤} h E)
    
  Œ¥  : ‚àÄ  {R : DescI If‚Ä≥ Œò L} {V'} {W'}
          {D : ConI If Œì J V'} {E : ConI If‚Ä≤ Œî K W'}
          {j : Œì & V ‚ä¢ L} {k} {g : Vxf Œì _ _} {h : Vxf Œî _ _} {f' : VxfO c _ _}
     ‚Üí ConOrn f' e D E
     ‚Üí (  ‚àÄ {p'} (p : ‚ü¶ W ‚ñ∑ liftM2 (Œº R) (k ‚àò over f) (j ‚àò over f) ‚üßtel p')
          ‚Üí g (VxfO-‚ñ∑ f (liftM2 (Œº R) k j) p) ‚â° f' (h p))
     ‚Üí ‚àÄ {if if‚Ä≤}
     ‚Üí ‚àÄ {iff iff‚Ä≤}
     ‚Üí ConOrn f e  (Œ¥ {if = if} {iff = iff} j k R g D)
                   (Œ¥ {if = if‚Ä≤} {iff = iff‚Ä≤} (j ‚àò over f) (k ‚àò over f) R h E)
\end{code}
%</Orn-sigma-delta>

Extending
%<*Orn-+-rho>
\begin{code}
  ŒîœÅ  : ‚àÄ {D : ConI If Œì J V} {E} {k} {h}
      ‚Üí ConOrn f e D E
      ‚Üí ‚àÄ {if}
      ‚Üí ConOrn f e D (œÅ {if = if} k h E) 
\end{code}
%</Orn-+-rho>

%<*Orn-+-sigma-delta>
\begin{code}
  ŒîœÉ  : ‚àÄ {W'} {S} {D : ConI If Œì J V} {E : ConI If‚Ä≤ Œî K W'}
      ‚Üí (f' : VxfO c _ _) ‚Üí {h : Vxf Œî _ _}
      ‚Üí ConOrn f' e D E
      ‚Üí (‚àÄ {p'} (p : ‚ü¶ W ‚ñ∑ S ‚üßtel p') ‚Üí f (p .proj‚ÇÅ) ‚â° f' (h p))
      ‚Üí ‚àÄ {if‚Ä≤}
      ‚Üí ConOrn f e D (œÉ S {if = if‚Ä≤} h E)
 
  ŒîŒ¥  : ‚àÄ  {W'} {R : DescI If‚Ä≥ Œò L} {D : ConI If Œì J V} {E : ConI If‚Ä≤ Œî K W'}
           {f' : VxfO c _ _} {m} {k} {h : Vxf Œî _ _}
      ‚Üí ConOrn f' e D E
      ‚Üí (‚àÄ {p'} (p : ‚ü¶ W ‚ñ∑ liftM2 (Œº R) m k ‚üßtel p') ‚Üí f (p .proj‚ÇÅ) ‚â° f' (h p))
      ‚Üí ‚àÄ {if‚Ä≤ iff‚Ä≤}
      ‚Üí ConOrn f e D (Œ¥ {if = if‚Ä≤} {iff = iff‚Ä≤} k m R h E)
\end{code}
%</Orn-+-sigma-delta>

Fixing
%<*Orn---sigma-delta>
\begin{code}
  ‚àáœÉ  : ‚àÄ {S} {V'} {D : ConI If Œì J V'} {E : ConI If‚Ä≤ Œî K W} {g : Vxf Œì _ _}
      ‚Üí (s : V ‚äß S)
      ‚Üí ConOrn ((g ‚àò ‚äß-‚ñ∑ s) ‚àò f) e D E
      ‚Üí ‚àÄ {if}
      ‚Üí ConOrn f e (œÉ S {if = if} g D) E
     
  ‚àáŒ¥  : ‚àÄ  {R : DescI If‚Ä≥ Œò L} {V'} {D : ConI If Œì J V'} {E : ConI If‚Ä≤ Œî K W}
           {m} {k} {g : Vxf Œì _ _}
      ‚Üí (s : V ‚äß liftM2 (Œº R) m k)
      ‚Üí ConOrn ((g ‚àò ‚äß-‚ñ∑ s) ‚àò f) e D E
      ‚Üí ‚àÄ {if iff}
      ‚Üí ConOrn f e (Œ¥ {if = if} {iff = iff} k m R g D) E
\end{code}
%</Orn---sigma-delta>

Composition
%<*Orn-comp>
\begin{code}

  ‚àôŒ¥  : ‚àÄ  {Œò Œõ M L W' V'} {D : ConI If Œì J V'} {E : ConI If‚Ä≤ Œî K W'}
           {R : DescI If‚Ä≥ Œò L} {R' : DescI If‚Ä¥ Œõ M} {c' : Cxf Œõ Œò} {e' : M ‚Üí L}
           {f'' : VxfO c W' V'} {fŒò : V ‚ä¢ ‚ü¶ Œò ‚üßtel tt} {fŒõ : W ‚ä¢ ‚ü¶ Œõ ‚üßtel tt}
           {l : V ‚ä¢ L} {m : W ‚ä¢ M} {g : Vxf _ (V ‚ñ∑ _) V'} {h : Vxf _ (W ‚ñ∑ _) W'}
      ‚Üí ConOrn f'' e D E
      ‚Üí (O : Orn c' e' R R')
      ‚Üí (p‚ÇÅ : ‚àÄ q w ‚Üí c' (fŒõ (q , w)) ‚â° fŒò (c q , f w))
      ‚Üí (p‚ÇÇ : ‚àÄ q w ‚Üí e' (m (q , w))  ‚â° l (c q , f w))
      ‚Üí ( ‚àÄ {p'} (p : ‚ü¶ W ‚ñ∑ liftM2 (Œº R') fŒõ m ‚üßtel p') ‚Üí  f'' (h p) 
            ‚â° g  (VxfO-‚ñ∑-map f (liftM2 (Œº R) fŒò l) (liftM2 (Œº R') fŒõ m)
                 (Œª q w x ‚Üí  subst2 (Œº R) (p‚ÇÅ _ _) (p‚ÇÇ _ _)
                             (ornForget O (fŒõ (q , w)) x)) p))
      ‚Üí ‚àÄ {if if‚Ä≤}
      ‚Üí ‚àÄ {iff iff‚Ä≤}
      ‚Üí ConOrn f e  (Œ¥ {if = if}   {iff = iff}   l fŒò R   g D)
                    (Œ¥ {if = if‚Ä≤}  {iff = iff‚Ä≤}  m fŒõ R'  h E) 
\end{code}
%</Orn-comp>

-- (*) https://q.uiver.app/#q=WzAsNCxbMCwwLCJcXGJ1bGxldCJdLFsxLDAsIlxcYnVsbGV0Il0sWzAsMSwiXFxidWxsZXQiXSxbMSwxLCJcXGJ1bGxldCJdLFswLDEsImUiXSxbMiwzLCJmIiwyXSxbMiwwLCJqIl0sWzMsMSwiaSIsMl0sWzMsMCwiayIsMV1d
-- note that having ‚Üí ConOrn f e (ùüô (e ‚àò k)) (ùüô (k ‚àò f)) obviously satisfies the square
-- but if f is split epi, then the square also provides k.
-- f being split epi roughly states "Œî is a more informative parameter than Œì", so is this actually reasonable to ask?

{- diagrams
-- œÉ
https://q.uiver.app/#q=WzAsMTMsWzEsMSwiXFxHYW1tYSxWIl0sWzAsMSwiXFxEZWx0YSxXIl0sWzIsMSwiXFxtYXRocm17VHlwZX0iXSxbMCwwLCJKIl0sWzEsMCwiSSJdLFsxLDIsIlZcXHJoZCBTIl0sWzIsMiwiViciXSxbMSwzLCJXXFxyaGQgKFNcXGNpcmMgZikiXSxbMiwzLCJXJyJdLFszLDIsIlxcR2FtbWEsVlxccmhkIFMiXSxbNCwyLCJcXEdhbW1hLFYnIl0sWzMsMywiXFxEZWx0YSxXXFxyaGQgKFNcXGNpcmMgZikiXSxbNCwzLCJcXERlbHRhLFcnIl0sWzEsMCwiZiJdLFswLDIsIlMiXSxbMyw0LCJlIl0sWzUsNiwiZyJdLFs3LDgsImgiXSxbOSwxMCwiXFxoYXR7Z30iXSxbMTEsMTIsIlxcaGF0e2h9Il0sWzEyLDEwLCJmJyIsMl0sWzExLDksImYgXFxyaGQgUyJdXQ==

-- ŒîœÉ
https://q.uiver.app/#q=WzAsOCxbMCwxLCJXIl0sWzAsMiwiVyciXSxbMiwyLCJcXERlbHRhLFcnXFxyaGQgUyJdLFszLDIsIlxcR2FtbWEsViJdLFs0LDIsIlxcRGVsdGEsVyJdLFsyLDAsIlxcRGVsdGEsIFcnIl0sWzQsMCwiXFxtYXRocm17VHlwZX0iXSxbMywzLCJcXERlbHRhLFdcXHJoZCAoUyBcXGNpcmMgRWgpIl0sWzAsMSwiaCJdLFs0LDMsImYiLDJdLFsyLDUsIlxcbWF0aHJte2ZvcmdldH0iXSxbMiwzLCJmJyJdLFs1LDYsIlMiLDJdLFs0LDYsIlMnPVNcXGNpcmMgRWgiLDJdLFs3LDIsIkVoXFxyaGQgUyJdLFs3LDQsIlxcbWF0aHJte2ZvcmdldH0iLDJdLFs0LDUsIkVoIiwxXV0=

-- ‚àáœÉ
https://q.uiver.app/#q=WzAsNixbMCwxLCJcXERlbHRhLFciXSxbMSwxLCJcXEdhbW1hLFYiXSxbMSwyLCJcXEdhbW1hLCBWJyJdLFsyLDEsIlZcXHJoZCBTIl0sWzIsMiwiViciXSxbMiwwLCJWIl0sWzAsMSwiZiIsMl0sWzAsMiwiZiciLDJdLFszLDQsImciLDJdLFs1LDMsIlxccmhkIHMiLDJdXQ==

-- ‚àôŒ¥
https://q.uiver.app/#q=WzAsMzIsWzAsMCwiRDpcXG1hdGhybXtDb259XFxHYW1tYSBKIFYiXSxbMSwwLCJFOlxcbWF0aHJte0Nvbn1cXERlbHRhIEsgVyJdLFswLDEsIlI6XFxtYXRocm17RGVzY31cXFRoZXRhIEwiXSxbMSwxLCJSJzpcXG1hdGhybXtEZXNjfVxcTGFtYmRhIE0iXSxbNywwLCJcXGRlbHRhIGZfXFxUaGV0YSBsUmdEIl0sWzgsMCwiXFxkZWx0YSBmX1xcTGFtYmRhIG0gUicgaEUiXSxbMiwyLCJcXERlbHRhIl0sWzMsMiwiXFxHYW1tYSJdLFsyLDMsIlxcTGFtYmRhIl0sWzMsMywiXFxUaGV0YSJdLFs0LDIsIlciXSxbNSwyLCJWIl0sWzQsMywiTSJdLFs1LDMsIkwiXSxbNiwyLCJLIl0sWzcsMiwiSiJdLFs2LDMsIk0iXSxbNywzLCJMIl0sWzQsNSwiXFxHYW1tYSxWIl0sWzUsNSwiXFxUaGV0YSJdLFs0LDYsIlxcR2FtbWEsViJdLFs1LDYsIkwiXSxbNiw1LCJcXERlbHRhLFciXSxbNyw1LCJcXExhbWJkYSJdLFs2LDYsIlxcRGVsdGEsVyJdLFs3LDYsIlIiXSxbOCw1LCJWXFxyaGRcXG11IFIiXSxbOSw1LCJWJyJdLFs4LDYsIldcXHJoZFxcbXUgUiciXSxbOSw2LCJXJyJdLFsxMCw1LCJXJyJdLFsxMSw1LCJWJyJdLFswLDEsIiIsMCx7ImxldmVsIjoyfV0sWzIsMywiIiwwLHsibGV2ZWwiOjJ9XSxbNCw1LCIiLDAseyJsZXZlbCI6Mn1dLFs2LDcsImMiXSxbOCw5LCJjJyJdLFsxMCwxMSwiZl9jIl0sWzEyLDEzLCJmX3tjJ30iXSxbMTQsMTUsImUiXSxbMTYsMTcsImUnIl0sWzE4LDE5LCJmX1xcVGhldGEiXSxbMjAsMjEsImwiXSxbMjIsMjMsImZfXFxMYW1iZGEiXSxbMjQsMjUsIm0iXSxbMjYsMjcsImciXSxbMjgsMjksImgiXSxbMzAsMzEsImZfe2MnfSciXV0=

https://q.uiver.app/#q=WzAsMjYsWzAsMCwiRDpcXG1hdGhybXtDb259XFxHYW1tYSBKIFYnIl0sWzEsMCwiRTpcXG1hdGhybXtDb259XFxEZWx0YSBLIFcnIl0sWzAsMSwiUjpcXG1hdGhybXtEZXNjfVxcVGhldGEgTCJdLFsxLDEsIlInOlxcbWF0aHJte0Rlc2N9XFxMYW1iZGEgTSJdLFs3LDAsIlxcZGVsdGEgZl9cXFRoZXRhIGxSZ0QiXSxbOCwwLCJcXGRlbHRhIGZfXFxMYW1iZGEgbSBSJyBoRSJdLFsyLDIsIlxcRGVsdGEiXSxbMywyLCJcXEdhbW1hIl0sWzQsMiwiVyJdLFs1LDIsIlYiXSxbNCwzLCJXJyJdLFs1LDMsIlYnIl0sWzYsMiwiSyJdLFs3LDIsIkoiXSxbMiw1LCJcXEdhbW1hLFYiXSxbMiw0LCJcXFRoZXRhIl0sWzIsNiwiTCJdLFs1LDUsIlxcRGVsdGEsVyJdLFs1LDQsIlxcTGFtYmRhIl0sWzUsNiwiTSJdLFs4LDUsIlZcXHJoZFxcbXUgUiJdLFs5LDUsIlYnIl0sWzgsNiwiV1xccmhkXFxtdSBSJyJdLFs5LDYsIlcnIl0sWzMsNSwiXFxHYW1tYSxWJyJdLFs0LDUsIlxcRGVsdGEsIFcnIl0sWzAsMSwiIiwwLHsibGV2ZWwiOjJ9XSxbMiwzLCIiLDAseyJsZXZlbCI6Mn1dLFs0LDUsIiIsMCx7ImxldmVsIjoyfV0sWzYsNywiYyJdLFs4LDksImYiXSxbMTAsMTEsImYnJyJdLFsxMiwxMywiZSJdLFsxNCwxNSwiZl9cXFRoZXRhIl0sWzE3LDE4LCJmX1xcTGFtYmRhIl0sWzIwLDIxLCJnIl0sWzIyLDIzLCJoIl0sWzIzLDIxLCJmJyciXSxbMjIsMjAsImZcXHJoZCBcXG1hdGhybXtmb3JnZXR9IiwxLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV0sWzE4LDE1LCJjJyIsMl0sWzE3LDE5LCJtIl0sWzE0LDE2LCJsIl0sWzE5LDE2LCJlJyJdLFsyNSwyNCwiYyxmJyciXV0=
-}

%<*Orn>
\begin{code}
data Orn f e where
  []   : Orn f e [] []
  _‚à∑_  : ‚àÄ {D E D' E'}
       ‚Üí ConOrn {c = f} id e D' E'
       ‚Üí Orn f e D E
       ‚Üí Orn f e (D' ‚à∑ D) (E' ‚à∑ E)
\end{code}
%</Orn>


%<*erase-type>
\begin{code}
pre‚ÇÇ : (A ‚Üí B ‚Üí C) ‚Üí (X ‚Üí A) ‚Üí (Y ‚Üí B) ‚Üí X ‚Üí Y ‚Üí C
pre‚ÇÇ f a b x y = f (a x) (b y)

erase  : ‚àÄ {D : DescI If Œì J} {E : DescI If‚Ä≤ Œî K} {f} {e} {X : PIType Œì J}
       ‚Üí Orn f e D E ‚Üí ‚àÄ p k ‚Üí ‚ü¶ E ‚üß (pre‚ÇÇ X f e) p k ‚Üí ‚ü¶ D ‚üß X (f p) (e k)
\end{code}
%</erase-type>

\begin{code}
erase' : ‚àÄ {V W} {X : PIType Œì J} {D' : ConI If Œì J V} {E' : ConI If‚Ä≤ Œî K W} {c : Cxf Œî Œì} {f : VxfO c _ _} {e} (O : ConOrn f e D' E') ‚Üí ‚àÄ p k ‚Üí ‚ü¶ E' ‚üß (pre‚ÇÇ X c e) p k ‚Üí ‚ü¶ D' ‚üß X (over f p) (e k)

erase (O ‚à∑ Os) p k (inj‚ÇÅ x) = inj‚ÇÅ (erase' O (p , tt) k x)
erase (O ‚à∑ Os) p k (inj‚ÇÇ y) = inj‚ÇÇ (erase Os p k y)

erase' (ùüô j) p k x = cong _ x ‚àô j p
erase' {X = X} (œÅ O q r) p k (x , y) = subst2 X (sym (q _)) (r _) x , erase' O p k y
erase' {X = X} {c = c} (œÉ {D = D} {h = h} f' O q) (p , v) k (s , x) = s , subst (Œª z ‚Üí ‚ü¶ D ‚üß X z _) (cong (c p ,_) (sym (q _))) (erase' O (p , h (v , s)) k x)
erase' {X = X} {c = c} (Œ¥ {D = D} O q) (p , v) k (r , x) = r , subst (Œª z ‚Üí ‚ü¶ D ‚üß X z _) (cong (c p ,_) (sym (q _)) ) (erase' O _ k x)
erase' (ŒîœÅ O) (p , v) k (x , y) = erase' O _ k y
erase' {X = X} {c = c} (ŒîœÉ {D = D} f' O q) (p , v) k (x , y) = subst (Œª z ‚Üí ‚ü¶ D ‚üß X z _) (cong (c p ,_) (sym (q _))) (erase' O _ k y)
erase' {X = X} {c = c} (ŒîŒ¥ {D = D} O q) (p , v) k (x , y) = subst (Œª z ‚Üí ‚ü¶ D ‚üß X z _) (cong (c p ,_) (sym (q _))) (erase' O _ k y)
erase' (‚àáœÉ s O) (p , v) k x = s _ , erase' O _ k x
erase' (‚àáŒ¥ s O) (p , v) k x = s _ , erase' O _ k x
erase' {X = X} {c = c} (‚àôŒ¥ {D = D} DE RR' p‚ÇÅ p‚ÇÇ p‚ÇÉ) (p , v) k (x , y) = subst2 (Œº _) (p‚ÇÅ _ _) (p‚ÇÇ _ _) (ornForget RR' _ x) , subst (Œª z ‚Üí ‚ü¶ D ‚üß X z _) (cong (c p ,_) (p‚ÇÉ _)) (erase' DE _ _ y)
\end{code}

%<*ornAlg>
\begin{code}
ornAlg  : ‚àÄ {D : DescI If Œì J} {E : DescI If‚Ä≤ Œî K} {f} {e}
        ‚Üí Orn f e D E
        ‚Üí ‚ü¶ E ‚üß (Œª p k ‚Üí Œº D (f p) (e k)) ‚á∂ Œª p k ‚Üí Œº D (f p) (e k)
ornAlg O p k x = con (erase O p k x)
\end{code}
%</ornAlg>

%<*ornForget>
\begin{code}
ornForget O p = fold (ornAlg O) p _
\end{code}
%</ornForget>

Examples
\begin{code}
module Ornaments where
  open Descriptions
\end{code}

%<*NatD-ListD>
\begin{code}
  NatD-ListD  : Orn ! id NatD ListD
  NatD-ListD  = ùüô (const refl)
              ‚à∑  ŒîœÉ _
              (  œÅ (ùüô (const refl)) (const refl) (const refl))
              (const refl)
              ‚à∑ []
\end{code}
%</NatD-ListD>

%<*ListD-VecD>
\begin{code}
  ListD-VecD  : Orn id ! ListD VecD
  ListD-VecD  = ùüô (const refl)
              ‚à∑  œÉ id
              (  ŒîœÉ _
              (  œÅ (ùüô (const refl)) (Œª p ‚Üí refl) (const refl))
              Œª p ‚Üí refl)
              (const refl)
              ‚à∑ []
\end{code}
%</ListD-VecD>

\begin{code}
data Tag‚Ä≤ : Type where
  CT DT : Tag‚Ä≤
\end{code}
